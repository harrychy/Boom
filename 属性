1.var cat = new Object;
  cat.legs = 4;
  cat.name = 'Kitty';
  in操作符 用来判断是否存在属性在本身或在原型链上:'legs' in cat;//true
                                            'abc' in cat;//false
                                            'toString' in cat;//true
  hasOwnProperty属性 用来判断是否存在属性在本身上:cat.hasOwnProperty('legs');//true 
                                              cat.hasOwnPorperty('toString');//false
  propertyIsEnumerable属性 用来判断属性是否可以枚举 cat.price = {enumerable:false,value:1000}//此处设置为false 不可以枚举
  
2.属性枚举
    var key;
    for(key in cat){
	      console.log(key);
    }

3.getter/setter 读写属性的方式
	var man = {
    	  weibo : '@Bosn',
    	  $age : null,
    	  get age() {
        	  if (this.$age == undefined) {
            	  return new Date().getFullYear() - 1988;
        	  } else {
            	  return this.$age;
        	  }
    	  },
    	  set age(val) {
        	  val = +val;
        	  if (!isNaN(val) && val > 0 && val < 150) {//isNaN()用来检测NaN，该值表示一个非法的数字
            	  this.$age = +val;
        	  } else {
            	  throw new Error('Incorrect val = ' + val);
        	  }
    	  }
	}
 get/set与原型链：
 	如果原型链上存在通过get设置的z属性，这在实例上不可以通过obj.z的方式写入属性。
	只能Object.defineProperty(obj, 'z', {value : 100, configurable: true});//只能用defineProperty的方法写
		obj.z; // 100;
		delete obj.z;
		obj.z; // back to 1

	
